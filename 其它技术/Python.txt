1、数据类型   布尔值（True和False）   运算符（and、or、not）   空值（None）
2、rstrip() lstrip() strip(rm)  s.strip(rm)是删除s字符串中开头和结尾处的rm字符串，
	如果rm为空时，默认删除空白符，包括('\n','\r','\t')。
3、str()   将非字符串表示为字符串。
4、整数除法的结果只包含整数部分，小数部分被删除，如3/2=1，如要避免，将写成3.0/2的形式。
5、Python注释用#号标识。
6、字符名.title()   输出首字母为大写的字符。还可以使用   字符名[0].upper()+字符名[1:]。
7、[]在Python中叫做列表。print(列表名)输出的是带括号的列表。print(列表名[-1])输出倒数第一个元素。
	也可以是-2，依次类推。如果是print(列表名[-3,-1]),则是输出倒数第二个和倒数第三个元素（不含-1）。
8、列表名.append('元素名')   用来添加列表成员在列表末尾。也可以用”列表名1+=列表名2“来连接两个列表。
9、列表名.insert(目标位置,'元素名')   在列表指定位置插入元素,从0开始计数。
10、del 列表名[目标位置]   删除列表中目标位置元素。
11、x=列表名.pop(目标位置)   从列表中弹出目标位置的元素给x,进行后续操作，
	括号为空时弹出的是最后一个元素。元素弹出后将不会再包含在列表中。
12、列表名.remove('指定元素名称’)   根据元素值删除列表元素。
13、列表名.sort()   对列表元素按字母从小到大排序。   
14、列表名.sort(reverse=True)   按字母从大到小的顺序进行排序。
15、列表名.sorted()   对列表进行临时排序，不影响它们在列表中的原始排序，可使用列表名.sorted(reverse=True)。
	也可以通过函数传入两个待比较的元素 x, y，如果 x 应该排在 y 的前面，返回 -1，
	如果 x 应该排在 y 的后面，返回 1。相等返回 0。要逆序的话将返回值改成相反即可。
	调用方法为print sorted([3,6,2,4],f)
16、列表名.reverse()   将列表元素的顺序倒置。先调用倒置函数，再调用print()函数。
17、len(列表名)   获取列表的长度。
18、用for语句循环输出列表所有元素   for x in 列表名:
					print (x)
19、range(数值1，数值2)   可以生成一串数值，从数值1到数值2（不包含数值2）。
20、list()   用来生成一个列表。如numbers=list(range(1,6))就是生成一个1，2，3，4，5的列表。
	也可以将字符串转成列表，如x=list(字符串)，输出的x即为一个列表。
21、range(数值1，数值2，数值3)   数值3代表生成数间隔。如numbers=list(range(2,11,2))是生成2，4，6，8，10的列表。
22、值1=值2**2   值1等于值2的平方。
23、min(列表名) max(列表名) sum(列表名)   找出列表中的最小值、最大值和总和。
24、列表解析，快速创建列表法。 列表名=[value**2 for value in range(1,11)] 列表的值为1~10的平方十个数。
25、切片   print(列表名[数值1：数值2])   输出列表中数值1到数值2（不含）的元素，如果省略数值1则默认从第0个元素
	开始，如果省略数值2则默认到最后一个元素，如果都省略则代表全部元素。可以使用负数，从末尾进行计数。
26、复制列表 列表2=列表1[:] 这是创建了一个列表1的副本，两个列表互不关联。如果是列表2=列表1，则代表同一个列表。
	这时候对其中任意一个列表的操作都会影响另一个列表。
27、元组(tuple) 元组名=(元素1，元素2)   元组内的元素可以被访问，但不能被修改。
	访问方式也为元组名[数字序号]。注意的是，如果是单元素元组，应该在此元素后面加一个逗号。如(1,)
	元组的长度用len(元组名)表示，不能用元组名.len表示。
	其它可以应用在列表中的函数，如果它会改变元组内容，则不能在元组中使用，如append()、insert()等。
	可以通过list(元组名)将元组转换成列表，就能够进行修改内容操作，但是不会影响原来的元组。
28、元组的元素虽然不能修改，但是我们能够给元素名重新定义，如元组名=(新元素1，新元素2)。
29、元素.upper() 转换为大写   元素.lower() 转换为小写。
30、检测某元素是否在列表中，可以用   if 元素 in 列表:
					  执行条件
	检测某元素是否不在列表中，可以用   if 元素 not in 列表:
						执行条件
31、if 列表名:   用来判断列表是否为空，如不为空返回True，为空返回False。
32、字典：字典是一系列键-值对。格式如   字典名={'color':'green','points':5}
	字典访问方法：   字典名['color']
	添加键值对：   字典名['键名']='键值’
	修改键值对：   字典名['键名']='新键值’
	删除键值对：   del 字典名['键名']
	删除字典：	del 字典名
	复制字典：	新字典名=旧字典名.copy()
	遍历字典：   for 值1，值2 in 字典名.items():   需要注意的是，获取的顺序是不可预测的。可以用sorted来排序。
	只遍历字典中的键：   for 值1 in 字典名.keys():   也可以直接省略.keys()，但是表达上不容易理解。
	只遍历字典中的值：   for 值1 in 字典名.values():  也可用itervalues(),节省内存。 
33、用户输入 message=input("xxxx:")   括号中的是输入提示字，用户输入的信息保存在message，不含提示字。
	用户输入的都是字符格式，如果要将其转换成数字，可以使用int()强制转换。如 数值变量=int(输入变量)。
	int(x,y)函数中其实包含两个参数，第二个参数为转换的进制数，当没有传入时默认为十进制。
34、while循环   while 变量<=3:   会执行下面缩进的程序。
35、标志位 active   有True和False两种状态。如while active:   可通过标志位来判断是否循环。
36、在Python中的任何循环都可以通过使用break语句来跳出。也可使用continue来跳过当前这一个循环。
37、判断列表中是否含有某元素：   while '元素名' in 列表名：   如果存在则执行下面缩进程序。
38、定义函数   def 函数名(参数1，参数2):  
39、在给函数传递参数时，我们既可以按参数的位置顺序传递，也可以在调用函数时直接给形参赋值的形式。
	如函数名(参数1='实参1',参数2=’实参2')，赋值形式传参可以忽略传参顺序。
40、可以给函数设定默认值，即函数名(参数1='默认值1',参数2=’默认值2') :   注意等号两边不要有空格。
41、当函数有多个形参时，带默认值的形参要放在后面，防止冲突。
42、Python中的print()自带换行功能，如果要取消，方法一是在语句末尾加个逗号，Python2中适用。
	方法二在Python3中适用，需写成print(输出变量,end="")。
43、禁止函数修改列表实参，可将列表的副本传给函数，如function(list_name[:])。这种方法更耗时间。
44、传递任意数量的实参   def function(*形参名):   让Python创建一个空元组，将所有实参封装到这个元组。
	可以将位置实参和任意数量实参结合使用，如def function(形参1，*形参2):
	进行元素操作时可使用	for x in 形参2：的形式。
45、使用任意数量的关键字实参，如def function(**形参名):   可以传递键值对给函数。
46、导入模块，模块是xx.py的文件，如果要在另一个文件中引入这个文件，可以在程序开头写入import xx。
	导入模块的语句要写在程序的最前面，如果要使用在xx.py中的函数，可使用xx.函数名(参数)。
	还可以导入特定的函数，如 from xx import 函数名1，函数名2，函数名3 	（不带括号）
	给模块指定别名，如import 模块名 as 新模块名，或者为from 模块名称 import 函数名称 as 新名称。
	给模块的函数指定别名，防止函数名冲突，如 from xx import 原函数名 as 函数别名 
	导入模块中的所有函数，如 from xx import *   这种方法无需通过.号表达式调用函数，可直接调用。
	import也可以导入类，用法同函数一样，如定义类为：定义类的名称=模块名.类名(参数)。
47、类：定义方式 class Dog():   根据约定，首字母大写的名称指的是类。
	构造函数：   def _init_(self,其它参数):   构造函数名固定为__init__()。注意是两个底线。
	在类中所有的方法都必须带有self参数，且都在第一个参数位置。 
	私有属性，在定义时在属性名称前面增加__（两个底线），如self.__name=uname;
	私有方法，定义方法同私有属性，即在名称前增加__（两个底线），如def __function(self,x):
	继承：   class 子类(父类):
	调用父类的属性或方法时，可使用super.属性（方法）。
	如果子类想调用祖父类的属性，需要在父类与子类的__init()__方法中添加super().__init__()。
	如果Ivan类和Ira是兄弟类，它们如果要想到调用对方的属性需要在各自的构造函数中
		添加super().__init__()，Ivan中就能够使用Ira().属性。
	多重继承，class 类名称(父类1，父类2，……）如果父类同时包含一个方法，子类调用时会执行最左边的。
	isinstance()函数可以判断一个对象是否属于某一个类，格式如：isinstance(对象，类)。
	文档字符串__doc__，如果在函数或类的方法中用'''……'''进行批注了，可以使用函数名.__doc__来调用。
		如果是类中批注，则使用定义的类名.__doc__来调用，
		如果是在类中的方法批注，则用定义的类名.方法名.__doc__来调用。
	__name__属性，如果是自己程序执行，__name__等于__main__，如果是通过import导入的，
		则为导入目标的文件名，此属性主要用来判断是自己执行还是被其它程序import导入模块执行。 
	可以在子类重写父类的方法，方法名同父类一样。
	在类中也可以使用import，用法同函数一样。
	对于每个类，都应该在后面包含一个文档字符串，用来简要地描述类的功能。
48、如果类的内容太多，可以将属性和方法提取出来，放在另一个类中。然后在初始化中通过self.属性名=另一类名()来关联。
	如果要调用那个类的中的方法中，可以使用   self.属性.另一类名中的方法()。
49、输出时可使用round(变量,2)的方法来保留两位小数。
50、如果一个字符串包含很多需要转义的字符，对每一个字符都进行转义会很麻烦。为了避免这种情况，
	我们可以在字符串前面加个前缀r，表示这是一个 raw 字符串，里面的字符就不需要转义了。
51、输入中文中，需要在最前面添加# -*- coding: utf-8 -*-或# coding=utf-8
52、set集合存储的是一组不重复的无序元素，格式如s=set([1,2,3])。
	定义空集合：	集合名=set()
	如果要添加元素时，使用s.add(4)。删除元素时，使用s.remove(4)。
	集合的复制：	新集合名称=旧集合名称.copy()   这是浅复制，不影响原集合。
	交集符号&，如 集合3=集合1 & 集合2 ，可以得到交集元素，也可以使用：AB=A.intersection(B)
	同理并集符号|，函数为union()，格式为：AB=A.union(B)
	同理差集符号-，函数为difference()，使用差集函数A.difference(B)和B.difference(A)结果有差异。
	同理对称差集^,函数为symmetric_difference(),代表的是去除同时属于两个集合的元素。格式同上。
	discard()函数，可以删除集合的元素，如果元素不存在也不会有错误产生，如value=集合.discard(元素)。
		不论删除结果为何，这个方法会传回None。
	集合中的pop与列表的pop有所区别，它是随机方式删除元素，格式为value=集合.pop()。括号内为空。
	isdisjoint()函数，如果两个集合没有共同元素传回True，否则传回False。
	issubset()函数，测试一个集合是否为另一个集合的子集，如果是返回True，否则为False。
	issuperset()函数，测试一个集合是否为另一个集合的父集，如果是返回True，否则为False。
	intersection_update()函数，将传回集合的交集，格式为value=集合A.intersection_update(集合1，集合2)。
	update()函数，将一个集合的元素加到另一个集合，格式为：集合A.update(集合B)。
	difference_update()函数，可以删除集合内与另一集合重复的元素，格式为：集合A.difference_update(集合B)。
	symmetric_difference_updata()，同函数为symmetric_difference()类似，但调用格式不同，
		为：集合A.symmetric_difference_updata(集合B)。
	frozenset()是不可变集合，设定元素后就不能再进行更改。格式为：x=frozenset([1,3,5])。
53、在函数外定义的变量是全局变量，在函数内不能直接使用，需要声明，如global 变量名
	在函数内部定义的变量是局部变量，与全局变量没有直接联系。
54、使用enumerate()函数可以在for循环中绑定索引index和元素name
	如 for index,name in enumerate(列表):   index是从0开始的序列。
55、zip()函数能将两个list变成一个list，如zip([1,2,3],['a','b','c'])会变成
	[(1,'a'),(2,'b'),(3,'c')]
	如果两个列表参数个数不相等，则最终数量是较短的那个数量，剩余的元素丢失。
56、简化生成列表步骤，如生成列表[1,4,9,……,100]，可用列表名=[x*x for x in range(1,11)]
	第二种，生成含有条件的列表，新列表=[表达式 for 项目 in 对象 if 条件式]，
	如生成符合勾股定理的列表方法如下：
	x=[[a,b,c]for a in range(1,20) or b in range(a,20) for c in range(b,20) if a**2+b**2==c**2]
	print(x)
57、传递函数作为参数， def add(x,y,f):   可以传入add(25,9,sqrt)
	没有写返回值的函数会自动返回一个None。
	函数支持返回多个数据，在接收时也需要用多个变量来接收，如a,b,c=function(x,y)。
	匿名函数lambda是指一个没有名称的函数，格式为： lambda arg1,arg2,……:expression。
		例：product=lambda x,y:x*y; print(product(5,10)); 将会输出50。
	当我们定义函数但尚未完成定义函数内容时，可以用pass代替函数内容。
58、map()函数它接收一个函数f和一个list，并通过函数f依次作用在list的每个元素上。
	如 print map(f,[1,2,3])   map()函数不改变原有的list，而是返回一个新的list。
	也可以写成：newlist=list(map(lambda x:x**2,mylist))。即将mylist元素都乘以2，生成新列表。
59、reduce()函数同map()函数类似，不同的是reduce()函数中的f函数必须接收两个参数。
	如def f(x,y):
		return x*y   当调用print reduce(f,[1,2,3,4]，x)时，输出为24+x,x为计算的初始值。
60、filter()函数，它能够根据f()函数自动过滤不符合条件的元素。格式为：filter(function,iterable)。
	如 def f(x):
		return x%2==1   当调用print filter(f,[1,2,3,4])时，能过滤过偶数。
		也可以写成return x if(x%2==1) else None
	输出列表时可以写成print([item for item in 列表])。
61、关键字lambda表示匿名函数，如lambda x:x*x实际上就是return x*x。冒号前面的x表示函数参数。
62、通过装饰器可以极大减少代码，如打印日志：@log     检测性能：@performance
63、如果Python要同时注释多行语句，可以使用三个单引号或三个双引号。用法同/*   */，也可以用
	三个引号来表示多于一行的字符串。
64、如果某个变量不再需要，可以使用 del 变量名称 的方式进行删除。
65、Python可以一行写多个语句，用分号隔开即可，但不建议这种写法。
66、可以将一条语句分成多行，在最后面用"\"进行连接，后面不可放任何东西，连注释也不行。
	也可以用()连接，后面可以放注释。 
67、type()函数可以输出变量数据类型，如print(type(x))可以输出变量x的数据类型。
68、以0b开头的数字为二进制表示形式，以0o开头的数字为八进制表示形式，0x代表十六进制。可以分别用
	函数bin()、oct()和hex()函数将十进制数字转换为对应进制数字。
69、chr(x)可以返回x值的字符，x是ASCII码值。ord(x)可以返回字符或中文的Unicode码值，如果是英文则为ASCII码值。
70、字符串与整数相乘就是将该字符复制整数倍。
71、格式化print()输出，如print("……%s……%d……"%(变量1，变量2))
72、同上，可以使用format()函数实现同样效果，如print("……{}……{}……".format(变量1，变量2))
73、精准控制格式化的输出，%(+|-)nd:格式化整数输出，%(+|-)m.nf:格式化浮点数输出，%(+|-)ns:格式化字符串输出，
	%(+|-)no:格式化8进制整数输出，%(+|-)nx:格式化16进制整数输出，+号代表数据是正值时，输出带正号，
	-号代表保留格数空间有多时，数据将靠左输出。
74、通过print将输出内容输入到文件中，如文件对象名=open("目标文件名",mode="w")
										print("内容",file=文件对象名)
										文件对象名.close()
	mode有多种模式可以选择，为"r"是读，为"a"是附加写入……
75、help()函数，用来显示指令或函数的使用说明，如help(print),会输出print()函数的使用说明。
76、print()函数的默认用法，print(value,sep=" ",end="\n",file=sys.stdout,flush=False)
	value为输出的值；sep为输出多个数据时的分隔符，默认为一个空格；end为结束字符，默认为换行符；
	file为输出位置，默认为屏幕；flush为是否清除数据流的缓冲区，默认是不清除。
77、尚未设定的变量值None，即变量值为未知时设定成None，它的数据类型显示为”NoneType“。
78、index()函数，可以返回特定元素第一次出现的索引值，如索引值=列表名称.index (搜寻值)。
79、count()函数，可以返回特定元素内容出现的次数，如次数=列表名称.count(搜寻值)。
80、join()函数，可以将列表的元素组成一个字符串，如char.join(seq)，sep表示参数必须是列表、元组
	等序列数据，char是一个各元素间的分隔字符，可以是单一字符，也可以是字符串，自己定义。
81、列表内含列表，如num=[1,2,[3,4]]，可以用num[2]来代表[3,4]，也可以用num[2][0]、num[2][1]来输出。
	可以用append()函数将一个列表插入另一个列表的末端来生成这种列表中的列表效果。
82、extend()函数是将一个列表元素分散加到另一个列表末尾，如A.extend(列表B)。类似于列表的+号。
83、列表的深复制，如列表1=[1,2,3]，列表2=列表1，则在列表1或者列表2添加元素，两个列表都将包含。
84、id()函数可以用来获取变量的地址，如id(x),即可获得变量x的地址。
85、列表的浅复制，即复制的列表不会相互影响，如列表2=列表1[:]。
86、切片赋值，字符串本身无法修改内容，但是把它改为列表后可以使用切片来更改内容，如x[5:]=字符串。
87、split()函数，可以将字符串以空格为分隔符，将字符串拆开变成一个列表。如列表名=字符串.split()。
		可以用来分析一个文件内有多少个单字，如wordlist=data.split();	print(len(wordlist))。
88、in和not in表达式，判断一个对象是否属于另一对象。如“ab"在字符串”abcd"中。
89、is和is not表达式，比较两个对象是否相同，并不只是内容相同，也指对象变量指向相同的内存。
90、在Python程序中设立变量时，如果两个整数或浮点数变量内容相同，它们会使用相同的地址存储变量。
91、emumerate()方法可以将iterable类数值的元素用计数值与元素配对方式传回，语法格式为：
	obj=emumerate(iterable,start=0)，如果省略start=设定，默认值是0。
92、删除字典中的所有元素，如字典名.clear()。
93、fromkeys()是建立字典的一个方法。字典名=dict.fromkeys(seq,value)，seq是字典的键，如果没有
	设定value则用None作为字典的键值。seq可以是一个列表，代表字典的所有键名，键值全部为value。
94、get()函数可以搜寻字典的键，如果键名存在，则返回键值，不存在则返回默认值。
	格式为：	返回键值=dict.get('键名‘,默认值)	如果没有设置默认值，则返回None。
95、setdefault()函数与get()相同，格式为：	返回键值=dict.setdefault(键名,默认值)
	不同之处在于get()函数不会改变字典内容，而使用setdefault()函数时，如果搜寻的键不在，则会将
	键名：默认值加入字典，如果没有设置默认值则将键名：None加入字典。
96、字典删除元素pop()函数，格式为： 返回值=dict.pop(键名,默认返回内容)	键名是要删除的键名，
	并将键值返回，当找不到键名时，则返回默认的内定，没有设置默认内容则返回KeyError。
97、Pycharm中多行注释方法为：选中目标多行，按Ctrl+‘/'。
98、random模块，通过import random，可以使用value=random.randint(值1，值2)来获取随机值。
	choice()可以在列表中随机传回一个元素，用法如print(random.choice(列表名))。
	shuffle()可以将列表中的元素重新打乱排列，用法如print(random.shuffle(列表名))。
99、time模块，使用import time可以调用time()，如print(int(time.time()))可以输出1970.1.1以来的秒数。
	sleep()函数，可以用来延时。如time.sleep(1)，即为延时一秒的操作。
	asctime()函数，可以用正规格式显示当前年月日星期和时间，但不会动态显示。
	localtime()函数，可以返回当前的年月日时分秒星期、第几天和夏令时间，可以用索引方式获取。
		如xtime=time.localtime();	print xtime[0]即为年，依次类推。
100、sys模块，使用import sys引入模块，然后使用print sys.version可以输出当前Python的版本信息。
	stdin是指从屏幕输入，可以搭配readline()方法，可以读取屏幕输入直到按下Enter键的字符串。
		如print(sys.stdin.readline())，可以在括号内加一个正整数，代表读入的字符数，中文占一个位。
	stdout是指从屏幕输出，可以搭配write()方法，如sys.stdout.write(内容)。
101、keyword模块，可以使用print(keyword.kwlist)来输出所有的关键词。
	iskeyword()方法可以判断字符串是否是关键词，然后相应的传回True或False。
102、绝对路径是从根目录开始表达，如D:\Python\ch14\ch14_1.py
	相对路径中"."指的是当前文件夹，可以省略，".."指的是上一层文件夹。
	与文件路径有关的模块是os，可以使用getcwd()获取当前工作目录，如print(os.getcwd())。
	os.path.abspath()获取绝对路径，如print(os.path.abspath('.'))获取当前工作目录的绝对路径。
		print(os.path.abspath('..')列出上一层工作目录的绝对路径。
		print(os.path.abspath('当前文件名'))列出当前文件的绝对路径。
	os.path模块的relpath(path,start)会传回从start到path的相对路径，如果省略start，
		则传回当前工作目录到path的相对路径。如pritn(os.path.relpath('D:\\','ch14_3.py'))。
	exist(path):如果path的文件或文件夹存在传回True，否则传回False。
	isabs(path):如果path的文件或文件夹是绝对路径传回True，否则传回False。
	isdir(path):如果path是文件夹传回True，否则传回False。
	isfile(path):如果path是文件传回True，否则传回False。
	mkdir(path):建立path目录。
	rmdir(path):删除path目录，限制只能是空的目录。如果要删除不为空的要使用shutil中的retree()。
	remove(path):删除path文件。
	chdir(path):将当前工作文件夹改至path。
	os.path.join()可以将括号内的字符串参数结合为一个文件路径，参数可以有2个到多个。
	os.path.getsize(路径)可以获取特定文件的大小，返回为字节数。
	os.listdir(路径)将以列表方式列出特定工作目录的内容。如print(os.listdir("."))代表输出当前目录。
	os.walk()方法可以让我们遍历目录树，每次执行循环时传回三个值，当前工作目录名称(dirName),
		当前工作目录的子目录文件夹列表(sub_dirName)，当前工作目录的子目录文件列表(fileNames)。
		语法格式为：for dirName,sub_dirName,fileNames in os.walk(目录路径):  遍历所有文件夹。
		上述三个名称可以自行命名，但顺序不能更改，如果没有子目录，则返回[]。
	glob模块，可以使用glob方法获得特定工作目录的内容，可以使用通配符"*"，如"*.txt"获得所有txt文件。
		如for file in glob.glob('D:\\Python\\ch14\*.*')可以列出工作目录的所有文件。
		如for file in glob.glob('ch14_2*.*')可以列出当前工作目录的含有ch14_2名称的文件。
	可以使用open函数来打开文件，然后使用read()读取文件，所有的文件内容将以一个字符串的形式
		存于变量。如file_Obj=open(文件名); data=file_Obj.read();
	可以使用with应用，方法如：with open(文件名) as 文件对象：   使用这种方法会自动关闭文件。
	逐行读取，如：for line in file_Obj:   #line和file_Obj可以自行命名，file_Obj是文件对象名。
	readlines()可以逐行读取，以列表方式储存，储存包含换行符，它可以在with区块外遍历原先文件内容。
		如：with open(fn) as file_Obj:
				obj_list=file_Obj.readlines()   #obj_list是一个列表，可以在with外遍历。
	字符串的替换，格式为：字符串对象.replace(旧字符串,新字符串)   #新字符串将替换旧字符串。
	数据的搜寻find()，可以返回数据的索引位置，格式为：index=S.find(sub,start,end)，S是字符串，
		sub是搜寻的子串，start和end是搜寻区间，如果省略则为全部搜寻，没有找到则返回-1给index。
	写入数据，open()函数默认是mode='r'读取文件模式，如果要改为写入模式，可以在函数内输入'w'。
		如文件对象名=open(文件名,'w')，输出到文件可以用write()方法，如文件对象名.write(内容)。
		write()无法输出数值数据，应该用str()将其转换为字符串数据再输出。
	建立附加文件，使用文件对象名=open(文件名,'a'),通过文件对象名.write(内容)将输出附加在文件末尾。
	shutil模块，可以执行文件或目录的复制、删除、更改位置和更改名称。
		文件的复制，shutil.copy('source','destination')，将source文件复制到destination目的位置。
		目录的复制，shutil.copytree('source','destination')，目录底下的子目录和文件都将被复制。
		文件的移动，shutil.move('source','destination')，将source文件复制到destination位置。
		文件名的更改move()，同上，如果destination路径含有文件名，则可以达到更改名称的效果。
		删除底下有数据的目录rmtree()，如shutil.rmtree('目录名')。
103、程序异常，格式为	try:
							指令			#预先设想可能引发错误异常的指令
						except 异常对象：		#如除数为零的异常为ZeroDivisionError
							异常处理程序		#通常是指出异常原因，方便修正
						else:
							正确处理程序		#如果指令正确执行此区块指令，可省略此else
						finally:				#必须放在最后，不论是否发生异常一定会执行。
							程序
		通用型的异常对象为Exctption，应该写成except Exception:
		使用一个except捕捉多个异常，如except(异常对象1,异常对象2,……):
		使用Python内置的错误信息，如except(异常对象1,异常对象2,……) as e:
										print e 
		捕捉所有异常，直接写成except:
		抛出异常，如raise Exception('msg')		#msg是传递错误信息
			然后在捕捉时如except Exception as err:		#err是任意取的变量名称，内容是msg
								print("message",str(err))		#打印错误信息message和msg
	设计断言，格式为： assert 条件,'字符串'  
		如果条件为真，正常执行，如果为假，则会将右边的字符串输出到Traceback的字符串内。
104、日志模块logging，分为五个等级，DEBUG、INFO、WARNING、ERROR和CRITICAL。从低到高。
	可以通过logging.basicConfig(level=logging.DEBUG)   只有level等级或者更高级的才会被显示。
		例： logging.debug('内容')或者logging.info('内容')
	格式化logging信息输出format。
		如logging.basicConfig(level=logging.DEBUG,format='')，前导信息设置为空。
105、isdecimal()方法可以用来判断是字符是否是0-9的数字。如if string[i].isdecimal()==True，看版本。
	判断一个字符是否为字母，用元素.isalpha()。
	判断一个字符是否为空格，用元素.isspace()。
	判断一个字符是否为数字，用元素.isdigit()。
	判断字符串的首字母是否为大写，且其它字母为小写，用元素.istitle()。
	判断string是否至少有一个字符并且所有字符都是字母或数字组成，用str.isalnum()。




 













